import math

def modInverse(a, m): 
    m0 = m 
    y = 0
    x = 1
  
    if (m == 1): 
        return 0
  
    while (a > 1): 
  
        # q is quotient 
        q = a // m 
  
        t = m 
  
        # m is remainder now, process 
        # same as Euclid's algo 
        m = a % m 
        a = t 
        t = y 
  
        # Update x and y 
        y = x - q * y 
        x = t 
  
    # Make x positive 
    if (x < 0): 
        x = x + m0 
  
    return x 


def phi(q, p):
    phi_n = (q-1)*(p-1)

    return phi_n

    #print(phi_n)

def decrypt(c, d, n ):
    plain = pow(c,d,n) 

    return plain

def main():  
    n = 466075924392130606578152827557518540757319557078863900386905525950208929029856998268913177422179495122994050893686313356015681939654600440248285063560771687012301184745337323916466181517665442257608265881616689204981131174283306748722935218869711856615660769496762947833437259217065972405994540196268489014949498956250771508167030570473538742265781315394262275855505762602310979289679654916590368211843712724716429808637019625092255446793198170573184474042228070363856566200951987543862752405722064923225389979992202709720066464903877042742053482198649757536397030749114954704637671221034280305151513794257447797301037417087193223408714146984524853112169949931295022796265383410829296288811368014388627685886497659133222988027984107637785787193506531058901216372578348881966130532140895256545787206177364288309647915205393720825755262250599378303007772576145447985477192404599656068800433738220117075750400238231744673094948204943845773474473006282034836986382708091337279331909551030931678705549976077413546355254099670261561588414067929399569668163245427427287850990375257956985126726434081347822191863891988974055781354932909836149135481906988372499943850418536430715715914907399452881510536494030058549665259272528890196240483889
  
    #1, 2
    p = math.gcd
    q = n//p
    c = 249097308102990797803750804426741912337280341204258356343632936169323815883301793622314338314749248112905171550977416343226451475519102776421006519886439031851408846415120146296064008598372419400795427555423834820282766369443657139154985004775657032247300936614325817052982467804391286394857854504311823394326038069802996477820930461706385186629728850932738318958055377370704743442163134950868574567218387602708442969856617854010872772059364271673612716174682749582403033971168013631317436075803740251524426564028352828256968936531633296889755121763692419695381422556351239859407276609038702362150308843912747029589023493333250582257288395988575289305539333063335370616381233445935850916270089931532337965211314192552138198560055811916684671583319749271338912231744151848931339158809933375469653768938001548756078599693692090372630998754370047533655947438127750028887428206713888708500777247611337063514507108514173771282415806788478182815704267370558684563676509492262441779323241312572308436206503506349348990017761238681635889280506817036103240762749276096940622894742436510383231181699441268315136744988983702240452096540846281060191598019365684903962512481110191642770735423069537686333624507131847447884124913805850699078986796

    #print(q)

    n_p = phi(q, p)

    d = modInverse(65537, n_p)

    #print(d)

    sol = decrypt(c, d, n)

    print(sol)


   #q = 19099817844899682530167117646979773680086756828166704996096852876240823326736933957373938254865136931634223360944533712376460183678773592398316365351266237138992863631190773610372499646321614214802990471000842208029718327596560443842388974079028137507063360303276144856820780987877248859577453671181626028419432515532352365910710680593556554809333292163855800498123451577034855697675738853025786512400034469518313578360543265693326349367347691016359646307017809344464994265324944155760232614602089827345779443651880992578721109442820277130080342826560250989682136667195935467826552233139287602575549204196831105729293
main()



